Task3. Ввести с консоли строку с символами и пробелами. Посчитать количество слов в предлождении.

Task4. Написать метод, принимающий в качестве параметра строку. Возвращающий перевернутую строку.

Task5. Написать метод, принимающий в качестве параметра строку. Возвращающий перевернутую строку, не использующий дополнительной строки.

Task6. Написать программу состоящую из методов:
 - метод, считывает с консоли строку и возвращает ее
 - метод, считывает с консоли символ и возращает его
 - метод, принимает строку и символ, делает поиск символа в строке, возвращает индекс последнего вхождения символа в строке
 - главный метод, только вызовы этих методов.

Task7. Написать метод boolean myEquals(str1,str2), который принимает две строки.(не используя str.equals(str1))

Task8. Написать метод int MyIndexOf, который принимает две строки.(не используя indexOf)



[27.12.2015 18:24:26] Кузменюк Максим: Задача Вахтерша на чеку.
Vahtersha и MainVahtersha.
Вахтерша многоэтажного дома умеет:
 - addOwners(int count) - добавить хозяев
 - addFriends(int count) - добавить чужаков
 - removeOwners(int count)
 - removeFriends(int count)
 - printInfo() - метод выводит количество своих и чужих в доме.
Вахтерша не может допустить превышение чужих над своими.
Консольное меню!
**********************************************
Задача Автобус
(Bus и MainBus).
Написать класс Bus:
- с полем целочисленным countHuman (количество пассажиров)
- с метод void addHuman(int countHuman) (+ или - пассажиров)
- с методом printAboutMe (метод выводит количество пассажиров)
Также в методе addHuman, в случае уменьшения количества людей, не допускать, чтобы количество пассажиров было меньше 0.
Консольное меню!
***********************************************
[27.12.2015 18:24:47] Кузменюк Максим: Задача Самолет
(Plain и MainPlain).
Написать класс Самолет:
 - метод public void up() – самолет поднимается вверх
 - метод public void down() – самолет опускается вниз
 - метод public void printAboutMe() – метод сообщает, где самолет(↑или↓)
Написать класс MainСамолет: Консольное меню!
В классе Самолет, должно быть поле, которое отвечает за состояние самолета(то есть запоминать чем занимается самолет).

Поля объекта не менять напрямую(только через методы).
Методы up и down – должны проверять, чем занимается самолет.
Если самолет внизу, то вызов метода up – меняет положение самолета и выводит сообщение (я взлетел).
Если самолет вверху, то вызов метода up – меняет положение самолета и выводит сообщение (я не могу взлететь, так как уже в воздухе).
Метод  down должен аналогично вывести сообщение: (я сел) или (не могу сесть, так как уже сижу).

Консольное меню!
************************************************
Задача Лифт
(Lift и MainLift).
Будем считать, что все люди в дом попадают только через лифт, убывают тем же способом.
В доме есть лестница(не попадающая на 1 этаж), которой могут пользоваться люди в доме.
Поля объекта Lift не менять напрямую.(только через метод)
На первом этаже тех этаж(тут люди не живут).
Поля:
 - текущий этаж curFloor
 - общее количество этажей перемещения countFloat
 - общее количество перевезенных людей countPeople
 - количество людей находящихся в данный момент в доме. currentCountPeople
У лифта методы:
    - метод перемещения лифта с номером этажа для перемещения nextFloor и количеством человек countHuman:
  move(int nextFloor, int countHuman)
 - метод выводящий состояние лифта(значение всех полей объекта): printAboutMe()
Консольное меню!
информацию получаем методом printAboutMe.
[27.12.2015 18:24:55] Кузменюк Максим: Задача Программисты в Уругвае.
Developer
(Programmer1, Programmer2, Programmer3, MainProgrammer)
Есть три программиста, которые живут в городе А, а работают в городе В.
Программисты просыпаются в 8-55 и успевают за 5 минут умыться, одеться  и перекусить.
В 9-00 они выходят из дома.
Первый программист отправляется на работу на мотоцикле и в обычную погоду доезжает за 1 час.
Второй перемещается на общественном транспорте и доезжает за 2 часа.
Третий перемещается на велосипеде и доезжает за 3 часа.
Стоимость проезда на общественном транспорте составляет 20 тугриков.
Стоимость проезда на мотоцикле составляет 80 тугриков.
На велосипеде бесплатный проезд.
Если льет дождь, то время транспортировки каждым видом транспорта увеличиваются в два раза(от обычной погоды).
Если очень сухая погода, то время транспортировки уменьшается в два раза(от обычной погоды).
1 час работы оплачивается как 35 тугриков.
Длительность рабочего дня в этой стране ограничено до 18-00(без обеда).
Определить какой программист больше будет заработает: при обычной погоде, при дожде и при очень сухой погоде.
Определите, какой вид транспорта предпочтительней для каждого из 3-х видов погоды.
*************************************************

Телефон:
 Создать класс Phone с полями:
 - static Phone[] phones = new Phone[10];
 - String myNumber
 - String marka
 Изначально phones не содержит телефонов, все телефоны добавляются через конструктор.
 При создании нового объекта-телефона, мы должны указать его номер и он вносится в базу номеров phones.
 В этот класс добавить метод:
 - isNumberExist(String number) - проверяет наличие телефона в базе
 - call(String number) - выводит на экран "телефон такой-то(номер+марка) звонит такому-то(номер+марка)"
 - getRandomPhone() - возвращает случайный телефон из базы телефонов
 Ограничение в 10 телефонов.
 В MainPhone:
 - создать несколько телефонов с какими-то номерами
 - попробовать проверить наличие существующего и несуществующего номера.
 - для случайного телефона вызвать метод call и пусть звонит на случайный телефон.


 Написать классы Car, Track, AutoSalon.
 class Car{String number; String color; Track track;}
 class Track{String number; Car car;}
 class AutoSalon{ArrayList<Car> cars;ArrayList<Track> tracks; String[] menuList;}
 class MainAutoSalon{
  public static void main(String[] args){
   AutoSalon autoSalon = new AutoSalon();
   autoSalon.start();
  }}
 Требованию к закреплению и откреплению:
 1. Если прицеп закреплен за другим авто, то нельзя его закрепить для текущего.
 2. Если прицеп не прикреплен к текущему авто, то нельзя его открепить от этого авто.
 3. Методы закрпеления и открепления должны быть в классе Car
 и другие правила, которые должны быть соблюдены, для того, чтобы была корректность ссылок
 Меню операций:
 1. Добавить новый автомобиль
 2. Добавить новый прицеп
 3. Закрепить к авто прицеп(запрос индексов авто и прицепов)
 4. Открепить от авто прицеп(запрос индекса авто).
 5. Отобразить список авто.
 6. Отобразить список прицепов.
 7. Отобразить закрепления авто за прицепами.
 8*. Вызвать метод start для авто (запрос индекса авто).
 9*. Вызвать метод move для авто (запрос индекса авто).
 10*. Вызвать метод stop для авто (запрос индекса авто).
 11**. Отобразить список всех авто и прицепов с закреплениями и состояниями авто и прицепов.
 12. Выход
 Задания *: связать методы класса Car (move, stop) с методами класса Track(roll,stop).
 При попытке вызвать метод move для авто, вызвается метод roll для прицепа.
 При попытке вызвать метод stop для авто, вызвается метод stop для прицепа.


 Task. Написать класс BlockConditioners, Conditioner и MainConditioners.
 Класс BlockConditioners-это набор кондишнов.
 В блоке управления 10 кондиционеров.
 Делегирование.
 Класс Conditioner: int temperature, setTemperature(int k), turnOn(),turnOff(), getTemperature(),?? getTurn()
 Класс MainConditioner: консольное меню, где вызываются только методы объекта  BlockConditioners.

 В MainConditioner создание объекта BlockConditioners и вызов мтода этого объекта.

 Консольное меню:
 1. Отобразить состояние всех кондиционеров
 2. Включить кондиционер с индексом...
 3. Выключить кондиционер с индексом...
 4. Установить температуру для кондиционера с индексом...
 5. Выход.







 HomeTask. Написать класс телефонов.
  - abstract class Phone(String number, boolean camera, int sideSize)
  - class Nokia
  - class Samsung
  - abstract class IPhone{int appleId}
  - class IPhone4
  - class IPhone5
  Что умеют делать:
   - call(Phone ph) - телефон такой-то марки и с таким-то номером звонит такому-то телефон марки и номера
   - printModel()
   - printAppleId()// для айфонов
 Создать класс MainPhone, в котором создать список телефонов.
 Добавить пару телефонов с номерами каждого вида в список.(Nokia, Samsung, IPhone4, IPhone5)
 С консоли считать 2 (индекса)номера телефона и вызвать методы call  с одного номер на второй.
 Для всех телефонов из списка вызвать метод printModel.
 Затем для всех телефонов, для которых возможно вызвать метод printAppleId.




 Задача Кошка.
  Создать класс Кошка на основе класса Животное.
  Классы Cat и Animal.
  Кошка должна уметь:
  - Вывести на экран имя, метод void printName()
  - Подать голос, метод void say()
  - Поднимать шерсть дыбом, метод void riseHair()
  - Питаться, метод void eat()
  - Орать если ненаелась, метод void yellIfNotGorged()

 Задача Рыба.
  Создать класс Рыба на основе класса "Продукт в супермаркете".
  Классы Fish и Product.
  Рыба должна уметь:
  - Вывести свою цену, метод void printPrice()
  - Вывести срок хранения, метод void printStoragePeriod()
  - Проплыть, метод void swim()
  - Проглотить другую рыбу, метод void cannibalism(Fish fish)
  - Вывести свой штрихкод и цену, метод void printBarAndPrice()

  Задача Самолет.
  Создать класс Самолет на основе класса Крыло.
  Классы Plane и Wing.
  Самолет должен уметь:
  - Взлетать (это возможно если в обоих крыльях достаточно топлива для взлета, которое тратится при взлете, метод void takeoff())
  - Задавать маршрут (маршрут состоит из последовательности координат, метод void selectRoute(int[][] coordinates))
  - Вывести на экран маршрут, метод void printRoute()

  Задача:
  public interface Humanable {
   public void takeGlass(AbstractGlass glass);
   public void putGlass();
   public void pourWaterOnTable(AbstractTable table);
   public void fillGlass();
   public void printAboutMe();
  }
  public interface Glassable {
   public void pourFromMe();
  }
  public interface Tablable {
   public boolean isDry();
  }

  Интерфейсы: Humanable, Tablable, Glassable,
  Абстрактные классы: AbstractGlass, AbstractHuman, AbstractTable
  Классы: HumanWoman, HumanMan, GlassCircle, GlassSquare, Table, MainClass

  Когда выливается вода из стакана-стакан кричит я стакан круглый(или квадратный) выливаюсь.

  Задание в Main:
  1. Создать массив из 4-х человек разного пола(пол определяется с помощью Math.random)
  2. Создать список из 10 столов.(пронумеровать столы, автоматически increment)
  3. Каждый на угад берет стаканы.
  4. Провести перекличку( для каждого вызвать метод printAboutMe(Я м/ж и (если есть) у меня стакан кр/кв))
  5. Для каждого человека с консоли определяем индекс стола, человек выливает воду на стол(если у него есть стакан).
  6. Провести опрос столов на предмет сухости (вызов методов isDry).


  Task1. Запросить с консоли путь папки и расширение. Вывести на экран все файлы с раширением из этой папки(без иерархии)..

  Task2. Запросить путь на папку с консоли, получить список всех папок заданной папки с учетом иерархии.
  Например, поиск в папке "book" даст 5 элементов:
  -book
  --directory1
  ----file1
  ----file2
  --directory2
  ----directory3
  ------directory4
  --------directory5
  ----------file3
ArrayList<File>

////////////////////////////////////////////////////////////

Task 1. Написать метод, который заполняет файл четными числами от k1 до к2.
 Все числа в отдельной строке.
 Этот метод принимает имя файла , к1 и к2 в качестве параметра.
class Task1{
 public static void main(String[] args) throws Exception{
  String sFileName = "file2.txt";
  int k1 = 10;
  int k2 = 30;
  myMethod(sFileName, k1, k2);
 }
 public static void myMethod(String sFileName, int k1, int k2) throws Exception{
  ...
 }
}

////////////////////////////////////////////////////////

Task2. Шифр Цезаря с ключом например 3.
Написать метод, который принимает имя файла и шифрует содержимое файла шифром Цезаря.
Реализовать Шифрование (каждый символ смещается по таблице символов на 3 элемента вправо А в D)
 и Дешифрование (каждый символ смещается по таблице символов на 3 элемента влево E в B)
 Например: abe15 -> cdh48
 Изначально файл содержит несколько строк. Пробеллы и переходы на следующую строку не шифруются.

 Task3.
 1) Написать метод, который в качестве параметра принимает имя файла.
 Метод возвращает двухмерный массив (String): имена переменных и значение.

 В файле набор переменных указаны так:
 ;v=[156],ghg,hg;m=[12],tytuyr894848;vector=[qwe];
 Существуют правила форматирования текста в файле:
  - имя переменной всегда стоит между симвоами ';' и '='
  - значение переменной всегда идет после знака '=' и заключено в квадратные кавычки
  - все что идет после квадратных кавычек до ';' являются служебными символами и в данной задаче они игнорируются

 2) В мейне:
 - создать массив,
 - считать с консоли имя файла,
 - передать его в метод 1
 - полученный массив передать в метод 2

 Task4. Запросить с консоли путь на папку. Создать в этой директории файл "dyrectory.txt" и заполнить этот файл (без использования рекурсии)
  список всех файлов и папок этой папки, с вложеннной иерархией.
  Если файл "dyrectory.txt" уже существует, то не перезаписывать этот файл, а добавить в него новую информацию.

  Task5. Написать рекурсивный метод, который принимает в качестве параметров k.
  Метод выводит числа от k до 2.

  Task6. Написать рекурсивный метод, который принимает в качестве параметров k.
  Метод выводит числа от 2 до k.

  Task7. Написать метод, который считает факториал для числа n.

  Task8. Написать метод, который выводит n-ный член последовательности Фибоначчи
  A( n ) = A( n-1 ) + A( n-2 );
  A( 1 ) = A( 2 ) = 1

  Task9. Написать рекурсивный метод, проверяющий является ли число простым.

  Task10. Написать метод, принимающий в качестве параметра строку с значением папки на компьютере.
  С помощью рекурсии получить список всех файлов и всех папок этой папки с помощью рекурсии.

  Дома: Задачу с директориями сделать: без рекурсиии и с помощью рекурсии.
  С помощью System.nanoTime() - определить какой способ быстрее получать иерархию файлов и папок.

  long time1 = System.nanoTime();
  ...
  long time2 = System.nanoTime();

  long score = time2 - time1;



  Task1. Создать класс Notepad (записная книжка) с внутренним клас-
  сом или классами, с помощью объектов которого могут хра-
  ниться несколько записей на одну дату.
  Notepad ( ArrayList<Message> messages; )
  Message( GregorianCalendar date; ArrayList<String> list; )

  public class NotepadMain {

   public static void main(String[] args) {
    Notepad n = new Notepad();
    GregorianCalendar date1 = new GregorianCalendar(2015,01,20);
    GregorianCalendar date2 = new GregorianCalendar(2015,01,21);
    n.add(date1, "Первая строка");
    n.add(date1, "Вторая строка");
    n.add(date2, "Третья строка");
    n.printByDate(date1);
   }
  }


  Задача 3.
  Написать класс Светофор TrafficLight с перечислением EnumTrafColor.
   TrafficLight и EnumTrafColor реализуют отношения делегирования.
   В классе MainTrafficLight создаем объект класса Светофор и с помощью цикла for (например 10 раз) вызываем метод
   переключения цвета в светофоре.
   Между каждым перечислением(в main) вставляем код замирания на секунду(пол секунды)
    try {
     Thread.sleep(500);
    } catch (Exception e) {
     e.printStackTrace();
    }
   Подумать о том, чтобы в перечислении был метод например getNextColor, который переключает светофор на следующий цвет.
   Последовательность цветов у светофора:ж,з,ж,к,ж,з,ж,к,ж,з,ж,к




   HomeTask1. С помощью System.nanoTime() протестировать скорость работы алгоритмов сортировки:
    - выборкой
    - пузырьком
    - вставками
    - Шелла(половиной элементов)
    - Подсчётом
    - Хоара
    Какой алгоритм быстрее, если:
    - порядка 100 элементов
    - порядка 1000 элементов
    - порядка 10000 элементов

   HomeTask2.
   Реализовать двоичный поиск циклетами.
   Реализовать двоичный поиск рекурсетами.


   КАЛЬКУЛЯТОР
   1. Результат
   2. char, not String
   3. Управление сложностью
   4. Resultat и temp
   5. Совместимость


   HomeTask3. Написать перечисления Марок автомобилей.
     Сделать внутри возможность установки алиасов(синонимов).
     В мейне с консоли я ввожу "BMW" и "Bmw"и "bm", и хочу иметь объект этого
     перечисления. Сделать метод, который ищет подходящий
     алиас и возвращает установленное значение.
     Реализовать список алиасов и подумать как связать с конкретным значением!!!



     Task 1. Написать метод для конвертации массива строк(или чисел) в список строк(или чисел).
     Task 2. Написать класс, который умеет хранить в себе массив любых типов данных (int, long etc.). Реализовать метод, который возвращает любой элемент массива по индексу.
     Task 3. Написать класс животное, где тип животного Animal передается дженериком.
      Для класса реализовать метод say(выводит на экран сообщение):
      Кошка Cat говорит "мяу"
      Собака Dog говорит "гав"
      Лев Leo говорит "рррр"

     * Пример Container<E extends A>



     Task1. Написать класс Product у которого есть поля:
     name,price, дата покупки.
     с изначальной сортировкой по наименованию.
     Пусть продукт выводится на экран: Морковка цена дата
     Реализовать возможность отсортировать список:
      - по цене
      - по дате закупки
     В mainProduct:
     создать 10 продуктов.
     с разной датой закупки и разной ценой.
     Вывести список без сортировки
     Отсортировать список и вывести на экран
     Отсортировать список по цене и вывести на экран
     Отсортировать список по дате закупки и вывести на экран



     Task 1. Написать метод, проверяющий, является ли строка числом. Воспользоваться Integer. valueOf( str ). Если строка не число, то метод должен кидать исключение NullPointerException.

     Task 2. Написать метод, проверяющий, существует ли файл с определенным именем.(Можно использовать FileReader Scanner). Если файла нет, то метод кидает исключение ArithmeticException.

     Task 3. Дописать к классу Продукт свои исключения:
      - ошибка при попытке установить отрицательную цену
      - ошибка при попытке установить прошлогодную дату



      Task 1. Написать метод принимающий имя файла, в котором содержатся числа через пробеллы и ентеры.
      Вывести в консоль числа из файла, увеличенные в два раза.
      FileInputStream.

      Input File :
      17 2 35
      45 14

      Output: 34 4 70 90 28


      Task 2. Запросить у пользователя число. Определить это целое число, дробное число или не число.
      (InputStreamReader и BufferedReader, без Scanner)




      Task 2. Создать/использовать класс Авто(номер и двигатель авто). С консоли считать целое k.
      Создать k объектов Авто(со случайными значениями), записать каждый объект в отдельный файл(в байтовый поток),
      при этом имя файла соответсвует его номеру.

      Task 3. Написать программу, которая сканирует папку(из предыдущего пример) на поиск файлов с расширением ".out",
      где в каждом файле лежит объект Авто. Десериализовать объекты из файлов в объекты и поместить их в список Авто.
      Вывести на экран список Авто.


      Дома все доделать и реализовать:
      1. Бинарное дерево поиска
      2. Рекурсивный бинарный поиск
      3. Не рекурсивный бинарный поиск

      //Задачи на потоки
      Task 1. Создать поток, который будет каждые 10 секунд выводить текущее время на экран.
      Сделать возможность прерывания потока с помощью команды с консоли.

      Task 2. Создать 100 потоков, каждый их которых выведет на экран свой номер и дождется, пока его прервут.

      Task 3. Создать поток, который создаст 50 потоков,
      каждый их которых выведет на экран свой номер и дождется, пока его прервут.
      Прерывание дочерних потоков должно выполнятся из потока их порождающего.


      [01.03.2016 22:50:56 | Изменены 22:52:43] Кузменюк Максим: Задача1.
      Целочисленный калькулятор:
      public interface Calculator{
       public final String ByZero = "Error";
       public String printResult();
       public String getResult();
       public void inChar(char p);
      }
      public class AbstractCalc implements Calculator{
       private String result;
       private int temp;
       private char operation;
       @Override
       public String printResult(){
        System.out.println("Result = " + result);
       }
       public String getResult(){
        return result;
       }
      }
      Создать целочисленный калькулятор класс Calc наследник AbstractCalc, в котором реализовать метод inChar
      Вводимые символы такие: цифры, +, -, *, /, =
      Будем считать, что ввод символов возможен только те, что мы определили - цифры, операции и равно.
      Последовательность ввода такая: число1 + операция + число2 + равно.
      Написать модульный тест для проверки:
      1) корректного введения первого числа
      2) корректного введения операции
      3) корректного введения второго числа(проверка результирующего значения)
      4) корректного введения знака "="(проверка результирующего значения)
      Проверка при вводе чисел необходимо проверить следующее:
       - начинающихся с 0, должно быть преобразование и "0" не должен отображаться
       - результирующее поле должно соответсвовать набираемым символам
      Проверка корректного ввода операции - это значит, что результирующее поле не изменилось.
      При делении на 0 результат должен быть значение ByZero.
      ***********************************************************************
      Задача 2.
      Накануне занятия "стянуть" с глобального репозитория класс Calc.(из proff2_example/action04)
      Проверить его своим тестом.
      **********************************************************************
      Задача 3. Написать собственную реализацию MyHashMap
      Реализовать методы MyHashMap:
      1. boolean put(K, V)
      2. User get( K )
      3. int size()
      4. boolean remove(K key)
      5. MyEntry<K, V> entrySet()

      Наименование класса может звучать так: MyHashMap, при этом нельзя использовать HashMap.
      Примечение: напоминаю, что карта состоит из массива, элементами которого являются односвязанные списки.

      Для хранения пары значений рекомендую создать класс MyEntry c двумя полями соответсвенно для ключа key и значения value.
      *************************************************
      Задача 4. Реализовать тест для проверки работы вашей карты, сравнив ее работу с стандратной HashMap.
      В тесте необходимо проверить, что мы размещая пары элементов в аншу карту и стандартную, а затем деля обход
      по обеим картам, одиннаково ли карты размещают пары элементов: MyHashMap и HashMap.
      Делаем тест для пар в количестве не больше 12.
      Пары значений, попробуйте взять стандартные: Integer и String. Попробуйте картам передавать другие объекты:User,Product.
      **************************************************************************
      Задача 5.
      JavaFx с Users:
      поле TextField: логин
      поле TextField: пароль
      кнопка Button: добавить пользователя
      мемо-поле TextArea: список пользователей
      [01.03.2016 22:51:58] Кузменюк Максим: Задача в классе:
      [01.03.2016 22:52:00] Кузменюк Максим: Задача 1. Написать программу:
      Enum TypeProduct{Bread, Yogurt, Milk}
      class Product{name, TypeProduct type, int numberParty}
      ProductShop{Map<Product, String> shop(Product, NameOfContructor)}
      Добавить в Карту по паре продуктов каждого типа.
      Сделать:
      1) Вывести список фирм в алфавитном порядке
      2) Вывести список фирм в обратном порядке
      3) Вывести уникальные наименования товаров по типу продуктов


      Заготовка:
      public enum TypeProduct{
       Bread, Yogurt, Milk;
      }
      public class Product{
       private String name;
       private TypeProduct type;
       private int party;
      }



      ----------------------------------------------------

      Домашние размещаем в папках: hwWeek1 и hwWeek2.



      Написать программу:
      Enum TypeProduct{Bread, Yogurt, Milk}
      class Product{name, TypeProduct type, int numberParty}
      ProductShop{Map<Product, String> shop(Product, NameOfContructor)}
      Добавить в Карту по паре продуктов каждого типа.
      Сделать:
      1) Вывести список фирм в алфавитном порядке
      2) Вывести список фирм в обратном порядке
      3) Вывести уникальные наименования товаров по типу продуктов




      Задача1.
      Целочисленный калькулятор:

      Создать целочисленный калькулятор класс Calc наследник AbstractCalc, в котором реализовать метод inChar
      Вводимые символы такие: цифры, +, -, *, /, =
      Будем считать, что ввод символов возможен только те, что мы определили - цифры, операции и равно.
      Последовательность ввода такая: число1 + операция + число2 + равно.
      Написать модульный тест для проверки:
      1) корректного введения первого числа
      2) корректного введения операции
      3) корректного введения второго числа(проверка результирующего значения)
      4) корректного введения знака "="(проверка результирующего значения)
      Проверка при вводе чисел необходимо проверить следующее:
       - начинающихся с 0, должно быть преобразование и "0" не должен отображаться
       - результирующее поле должно соответсвовать набираемым символам
      Проверка корректного ввода операции - это значит, что результирующее поле не изменилось.
      При делении на 0 результат должен быть значение ByZero.
      ***********************************************************************
      Задача 2. Написать собственную реализацию MyHashMap<K, V>
      Реализовать методы MyHashMap:
      1. boolean put(K, V)
      2. User get( K )
      3. int size()
      4. boolean remove(K key)
      5. MyEntry<K, V> entrySet()

      Наименование класса может звучать так: MyHashMap, при этом нельзя использовать HashMap.
      Примечание: напоминаю, что карта состоит из массива, элементами которого являются односвязанные списки.

      Для хранения пары значений рекомендую создать класс MyEntry c двумя полями соответсвенно для ключа key и значения value.
      *************************************************
      Задача 3. Реализовать тест для проверки работы вашей карты, сравнив ее работу с стандратной HashMap.
      В тесте необходимо проверить, что мы размещая пары элементов в нашу карту и стандартную, а затем делая обход
      по обеим картам, одиннаково ли карты размещают пары элементов: MyHashMap и HashMap.
      Делаем тест для пар в количестве не больше 12.
      Пары значений, попробуйте взять стандартные: Integer и String. Попробуйте картам передавать другие объекты:User,Product.
      **************************************************************************
      Задача 4.
      JavaFx с Users:
      поле TextField: логин
      поле TextField: пароль
      кнопка Button: добавить пользователя
      мемо-поле TextArea: список пользователей



      Задача1: Вывести все методы класса String

      Задача2:(ReflectionTask2Example) Написать метод принимающий любой объект.
       Метод возвращает все классы в иерархию которых входит данный объект.

      Задача3:(ReflectionTask3Example) Написать метод, принимающий любой объект, выводящий список всех интерфейсов по иерархии наследования классов.



      ---------------------------------------------------------------------

      Написать класс Monitor(nameFile1,nameFile2), в котором два потока.

      1. Поток 1(ThreadCreator), считывает строку с консоли записывает в nameFile1,
       будит поток 2.(objSynchro.notify())

      2. Поток 2(ThreadWriter), копирует nameFile1 в nameFile2 и засыпает.
       (objSynchro.wait())

      Примечание:
      1. если с консоли введено слово "exit" или "quit", то поток №1 останавливать.
      2. продумать остановку и второго потока