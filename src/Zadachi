Task3. Ввести с консоли строку с символами и пробелами. Посчитать количество слов в предлождении.

Task4. Написать метод, принимающий в качестве параметра строку. Возвращающий перевернутую строку.

Task5. Написать метод, принимающий в качестве параметра строку. Возвращающий перевернутую строку, не использующий дополнительной строки.

Task6. Написать программу состоящую из методов:
 - метод, считывает с консоли строку и возвращает ее
 - метод, считывает с консоли символ и возращает его
 - метод, принимает строку и символ, делает поиск символа в строке, возвращает индекс последнего вхождения символа в строке
 - главный метод, только вызовы этих методов.

Task7. Написать метод boolean myEquals(str1,str2), который принимает две строки.(не используя str.equals(str1))

Task8. Написать метод int MyIndexOf, который принимает две строки.(не используя indexOf)



[27.12.2015 18:24:26] Кузменюк Максим: Задача Вахтерша на чеку.
Vahtersha и MainVahtersha.
Вахтерша многоэтажного дома умеет:
 - addOwners(int count) - добавить хозяев
 - addFriends(int count) - добавить чужаков
 - removeOwners(int count)
 - removeFriends(int count)
 - printInfo() - метод выводит количество своих и чужих в доме.
Вахтерша не может допустить превышение чужих над своими.
Консольное меню!
**********************************************
Задача Автобус
(Bus и MainBus).
Написать класс Bus:
- с полем целочисленным countHuman (количество пассажиров)
- с метод void addHuman(int countHuman) (+ или - пассажиров)
- с методом printAboutMe (метод выводит количество пассажиров)
Также в методе addHuman, в случае уменьшения количества людей, не допускать, чтобы количество пассажиров было меньше 0.
Консольное меню!
***********************************************
[27.12.2015 18:24:47] Кузменюк Максим: Задача Самолет
(Plain и MainPlain).
Написать класс Самолет:
 - метод public void up() – самолет поднимается вверх
 - метод public void down() – самолет опускается вниз
 - метод public void printAboutMe() – метод сообщает, где самолет(↑или↓)
Написать класс MainСамолет: Консольное меню!
В классе Самолет, должно быть поле, которое отвечает за состояние самолета(то есть запоминать чем занимается самолет).

Поля объекта не менять напрямую(только через методы).
Методы up и down – должны проверять, чем занимается самолет.
Если самолет внизу, то вызов метода up – меняет положение самолета и выводит сообщение (я взлетел).
Если самолет вверху, то вызов метода up – меняет положение самолета и выводит сообщение (я не могу взлететь, так как уже в воздухе).
Метод  down должен аналогично вывести сообщение: (я сел) или (не могу сесть, так как уже сижу).

Консольное меню!
************************************************
Задача Лифт
(Lift и MainLift).
Будем считать, что все люди в дом попадают только через лифт, убывают тем же способом.
В доме есть лестница(не попадающая на 1 этаж), которой могут пользоваться люди в доме.
Поля объекта Lift не менять напрямую.(только через метод)
На первом этаже тех этаж(тут люди не живут).
Поля:
 - текущий этаж curFloor
 - общее количество этажей перемещения countFloat
 - общее количество перевезенных людей countPeople
 - количество людей находящихся в данный момент в доме. currentCountPeople
У лифта методы:
    - метод перемещения лифта с номером этажа для перемещения nextFloor и количеством человек countHuman:
  move(int nextFloor, int countHuman)
 - метод выводящий состояние лифта(значение всех полей объекта): printAboutMe()
Консольное меню!
информацию получаем методом printAboutMe.
[27.12.2015 18:24:55] Кузменюк Максим: Задача Программисты в Уругвае.
Developer
(Programmer1, Programmer2, Programmer3, MainProgrammer)
Есть три программиста, которые живут в городе А, а работают в городе В.
Программисты просыпаются в 8-55 и успевают за 5 минут умыться, одеться  и перекусить.
В 9-00 они выходят из дома.
Первый программист отправляется на работу на мотоцикле и в обычную погоду доезжает за 1 час.
Второй перемещается на общественном транспорте и доезжает за 2 часа.
Третий перемещается на велосипеде и доезжает за 3 часа.
Стоимость проезда на общественном транспорте составляет 20 тугриков.
Стоимость проезда на мотоцикле составляет 80 тугриков.
На велосипеде бесплатный проезд.
Если льет дождь, то время транспортировки каждым видом транспорта увеличиваются в два раза(от обычной погоды).
Если очень сухая погода, то время транспортировки уменьшается в два раза(от обычной погоды).
1 час работы оплачивается как 35 тугриков.
Длительность рабочего дня в этой стране ограничено до 18-00(без обеда).
Определить какой программист больше будет заработает: при обычной погоде, при дожде и при очень сухой погоде.
Определите, какой вид транспорта предпочтительней для каждого из 3-х видов погоды.
*************************************************

Телефон:
 Создать класс Phone с полями:
 - static Phone[] phones = new Phone[10];
 - String myNumber
 - String marka
 Изначально phones не содержит телефонов, все телефоны добавляются через конструктор.
 При создании нового объекта-телефона, мы должны указать его номер и он вносится в базу номеров phones.
 В этот класс добавить метод:
 - isNumberExist(String number) - проверяет наличие телефона в базе
 - call(String number) - выводит на экран "телефон такой-то(номер+марка) звонит такому-то(номер+марка)"
 - getRandomPhone() - возвращает случайный телефон из базы телефонов
 Ограничение в 10 телефонов.
 В MainPhone:
 - создать несколько телефонов с какими-то номерами
 - попробовать проверить наличие существующего и несуществующего номера.
 - для случайного телефона вызвать метод call и пусть звонит на случайный телефон.


 Написать классы Car, Track, AutoSalon.
 class Car{String number; String color; Track track;}
 class Track{String number; Car car;}
 class AutoSalon{ArrayList<Car> cars;ArrayList<Track> tracks; String[] menuList;}
 class MainAutoSalon{
  public static void main(String[] args){
   AutoSalon autoSalon = new AutoSalon();
   autoSalon.start();
  }}
 Требованию к закреплению и откреплению:
 1. Если прицеп закреплен за другим авто, то нельзя его закрепить для текущего.
 2. Если прицеп не прикреплен к текущему авто, то нельзя его открепить от этого авто.
 3. Методы закрпеления и открепления должны быть в классе Car
 и другие правила, которые должны быть соблюдены, для того, чтобы была корректность ссылок
 Меню операций:
 1. Добавить новый автомобиль
 2. Добавить новый прицеп
 3. Закрепить к авто прицеп(запрос индексов авто и прицепов)
 4. Открепить от авто прицеп(запрос индекса авто).
 5. Отобразить список авто.
 6. Отобразить список прицепов.
 7. Отобразить закрепления авто за прицепами.
 8*. Вызвать метод start для авто (запрос индекса авто).
 9*. Вызвать метод move для авто (запрос индекса авто).
 10*. Вызвать метод stop для авто (запрос индекса авто).
 11**. Отобразить список всех авто и прицепов с закреплениями и состояниями авто и прицепов.
 12. Выход
 Задания *: связать методы класса Car (move, stop) с методами класса Track(roll,stop).
 При попытке вызвать метод move для авто, вызвается метод roll для прицепа.
 При попытке вызвать метод stop для авто, вызвается метод stop для прицепа.


 Task. Написать класс BlockConditioners, Conditioner и MainConditioners.
 Класс BlockConditioners-это набор кондишнов.
 В блоке управления 10 кондиционеров.
 Делегирование.
 Класс Conditioner: int temperature, setTemperature(int k), turnOn(),turnOff(), getTemperature(),?? getTurn()
 Класс MainConditioner: консольное меню, где вызываются только методы объекта  BlockConditioners.

 В MainConditioner создание объекта BlockConditioners и вызов мтода этого объекта.

 Консольное меню:
 1. Отобразить состояние всех кондиционеров
 2. Включить кондиционер с индексом...
 3. Выключить кондиционер с индексом...
 4. Установить температуру для кондиционера с индексом...
 5. Выход.







 HomeTask. Написать класс телефонов.
  - abstract class Phone(String number, boolean camera, int sideSize)
  - class Nokia
  - class Samsung
  - abstract class IPhone{int appleId}
  - class IPhone4
  - class IPhone5
  Что умеют делать:
   - call(Phone ph) - телефон такой-то марки и с таким-то номером звонит такому-то телефон марки и номера
   - printModel()
   - printAppleId()// для айфонов
 Создать класс MainPhone, в котором создать список телефонов.
 Добавить пару телефонов с номерами каждого вида в список.(Nokia, Samsung, IPhone4, IPhone5)
 С консоли считать 2 (индекса)номера телефона и вызвать методы call  с одного номер на второй.
 Для всех телефонов из списка вызвать метод printModel.
 Затем для всех телефонов, для которых возможно вызвать метод printAppleId.




 Задача Кошка.
  Создать класс Кошка на основе класса Животное.
  Классы Cat и Animal.
  Кошка должна уметь:
  - Вывести на экран имя, метод void printName()
  - Подать голос, метод void say()
  - Поднимать шерсть дыбом, метод void riseHair()
  - Питаться, метод void eat()
  - Орать если ненаелась, метод void yellIfNotGorged()

 Задача Рыба.
  Создать класс Рыба на основе класса "Продукт в супермаркете".
  Классы Fish и Product.
  Рыба должна уметь:
  - Вывести свою цену, метод void printPrice()
  - Вывести срок хранения, метод void printStoragePeriod()
  - Проплыть, метод void swim()
  - Проглотить другую рыбу, метод void cannibalism(Fish fish)
  - Вывести свой штрихкод и цену, метод void printBarAndPrice()

  Задача Самолет.
  Создать класс Самолет на основе класса Крыло.
  Классы Plane и Wing.
  Самолет должен уметь:
  - Взлетать (это возможно если в обоих крыльях достаточно топлива для взлета, которое тратится при взлете, метод void takeoff())
  - Задавать маршрут (маршрут состоит из последовательности координат, метод void selectRoute(int[][] coordinates))
  - Вывести на экран маршрут, метод void printRoute()