public class СonsoleMenuExmple {
 private static String[] operationNames = {"1. Прийти","2. Уйти","3. Зайти","4. Выйти"};
 public static void printMenu(){
  for(String m:operationNames) System.out.println( m );
 }
 public static void main(String[] args) {
  Scanner scan = new Scanner(System.in);
  boolean runWhile = true;
  while(runWhile){
   printMenu();
   int k = scan.nextInt();
   switch (k){
    case 1:System.out.println("fucntion Прийти");break;
    case 2:System.out.println("fucntion Уйти");break;
    case 3:System.out.println("fucntion Зайти");break;
    case 4:runWhile = false;
   }
  }
 }
}

/////////////////////////////////////////////////

Базовый, супер или родитель
Наследник, потомок произволный клас



instanceof - определить

///////////////////////////////////////////////////////////////////////
Figura[] f = new Figura[10];

Figura b = f[ i ];

if( b instanceof Circle) { ... }

b = new Rectangle();
if( b instanceof Rectangle) { ... } // true
if( b instanceof Square) { ... } // false

b=new Square()
if( b instanceof Rectangle) { ... } // true
if( b instanceof Square) { ... } // true

/////////////////////////////////////////////////////////////////////////
import java.io.FileReader;
import java.io.FileWriter;
import java.util.Scanner;

public class ReaderWriterExample {
 public static void main(String[] args) throws Exception{
  String fileName = "file1.txt";
  /*
  FileWriter fw = new FileWriter(fileName);
  fw.write("stroka 1\n15d\t9");
  fw.write("stroka 2");
  //fw.flush();
  fw.close();
  */

  FileReader fr = new FileReader(fileName);
  Scanner scan = new Scanner(fr);
  int i = 0;
  while (scan.hasNextLine()) {
   System.out.println("строка с номером :" + i+": " + scan.nextLine());
  }
  scan.close();

 }
}

StringBuilder

Замер производительности -----------------------------------------------------
import java.util.Arrays;

public class Task1 {
 public static void main(String[] args) {
  int[] arr1 = new int[500];
  long timeBegin;
  long t2;
  long scoreTime;
  for (int i = 0; i < arr1.length; i++)
   arr1[i] = (int) (Math.random() * 100);

  System.out.println(Arrays.toString(arr1));
  int[] arr2 = Arrays.copyOf(arr1, arr1.length);
  int[] arr3 = Arrays.copyOf(arr1, arr1.length);
  int[] arr4 = Arrays.copyOf(arr1, arr1.length);
  int[] arr5 = Arrays.copyOf(arr1, arr1.length);

  if (Arrays.equals(arr1, arr2))
   System.out.println("равны");
  else
   System.out.println("не равны");

  timeBegin = System.nanoTime();
  bubblesort(arr1);
  scoreTime = System.nanoTime() - timeBegin;

  System.out.print("bubblesort(arr1)= ");
  if (scoreTime < 10000000)
   System.out.print("0");
  System.out.println(scoreTime);

  timeBegin = System.nanoTime();
  bubblesort(arr2);
  scoreTime = System.nanoTime() - timeBegin;

  System.out.print("bubblesort(arr2)= ");
  if (scoreTime < 10000000)
   System.out.print("0");
  System.out.println(scoreTime);

  timeBegin = System.nanoTime();
  bubblesort(arr3);
  scoreTime = System.nanoTime() - timeBegin;

  System.out.print("bubblesort(arr3)= ");
  if (scoreTime < 10000000)
   System.out.print("0");
  System.out.println(scoreTime);

  timeBegin = System.nanoTime();
  bubblesort(arr4);
  scoreTime = System.nanoTime() - timeBegin;

  System.out.print("bubblesort(arr4)= ");
  if (scoreTime < 10000000)
   System.out.print("0");
  System.out.println(scoreTime);

  timeBegin = System.nanoTime();
  bubblesort(arr5);
  scoreTime = System.nanoTime() - timeBegin;

  System.out.print("bubblesort(arr5)= ");
  if (scoreTime < 10000000)
   System.out.print("0");
  System.out.println(scoreTime);
 }

 public static void bubblesort(int[] arr) {
  for (int k = 0; k < arr.length - 2; k++) {
   for (int i = 0; i < arr.length - 1; i++) {
    if (arr[i] < arr[i + 1]) {
     int temp = arr[i];
     arr[i] = arr[i + 1];
     arr[i + 1] = temp;
    }
   }
  }
 }
}
--------------------------------------------------------------------

ДЖЕНЕРИКИ

[15:50:18] Кузменюк Максим: public class ContainerGeneric {
 public static void main(String[] args) {
  Container<Integer> obj1 = new Container<Integer>();
  obj1.setValue(10);
  System.out.println(obj1.getValue());

  Container<String> obj2 = new Container<>();
  obj2.setValue("ab");
  System.out.println(obj2.getValue());

  Container<Double> obj3 = new Container<>();
  obj3.setValue(20.5);
  System.out.println(obj3.getValue());
 }
}
class Container<T> {
 private T value;
 public T getValue() {
  return value;
 }
 public void setValue(T value) {
  this.value = value;
 }
}
[15:50:30] Кузменюк Максим: public class SwapMethods {
 public static void swap(int[] a, int x, int y) {
  int temp = a[x];
  a[x] = a[y];
  a[y] = temp;
 }
 public static void swap(char[] a, int x, int y) {
  char temp = a[x];
  a[x] = a[y];
  a[y] = temp;
 }

 public static void main(String[] args) {
  String[] a = new String[10];
  SwapMethods.<String>swap (a, 1, 2);

  SwapMethods.<Integer>swap (new Integer[]{10,20,4}, 1, 2);
  SwapMethods.swap (new Integer[]{10,20,3}, 1, 2);
  System.out.println();
 }
 public static <T> T swap(T[] a, int x, int y) {
  T temp = a[x];
  a[x] = a[y];
  a[y] = temp;
  return temp;
 }
}

--------------------------------------

Планировщие потоков

class M extend Trhread{

@override
public void run(){
                    }
    }
}

M obj = new M();
obj.start();
----------------------------------

class N implement Runable{}
Thread obj = new Thread(new M());
obj.start()
----------------------------------



Потоки выполнения

setPriority(5);
setDaemon(true/false)
демон поток это поток который останавливается главный для него.
join() заставляет текущий поток дождатся выполнения потока для которого вызван метод join.
interrupt() - установитьФл, isInterrupted()-Проверить фл. - методы для работы с флашком остановки.
getState() - поток может находится в следующих состояниях :
1. New
2. Runnable
3. WaitingTime
4. Blocked
5. Terminate

----SQL--------------------------------------
select * , (distinct), колонки
from таблицы
where id>10
[>, <, <>, !=, >=, <=, NULL, is NULL, IS NOT NULL
AND OR NOT
BETWEEN, IN
LIKE % _
]
GROUP BY колонки
HAVING условие
ORDER BY колонки DESC|ASC