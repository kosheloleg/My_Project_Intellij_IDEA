Не наследуется
1. Поля и методы static,
2. private
3.  и конструкторы


Переопределение это процес замены метода базового класа, своим методом в наследнике
@override - это попросить компилятор проследить переопределения
1. Тип метода должен быть таким же
2. Модификатор доступа не может быть уже
3. Переопределение не может выбрасывать больше исключение

Агрегирование

Делигирование - это такой вид отношений когда один клас перевызывает методы другого класса.


Полиморфизм - это это механизм с помощью которой переменной родительского класса можем ссылатся на объект наследника
Полиморфизм - это способность переменной ссылочного типа иметь разную реализация
Полиморфизм - это возможность работать с объектами разный типов единым образом

Абстрактность - это метод не имеющий реализации
Предполагается что абстрактный метод будет переопределен в наследнике

Интерфейс это конструкция которая задает поведение объекта

Моя теория:
Абстрактный класы позволяют иметь методы абстрактные и не абстрактные

Интерфейс это изначально полностью абстрактный класс
Особенности интерфейсов это множественное наследование;
Поля в интерфейсах по умолчанию static final
Интерфейсы не могут иметь констукторов

Файловая система:

f.exist();
f.isFile();
f.isDirectory();

public class FileTest {
 public static void main(String[] args) throws IOException {
  File f = new File("d://book/1.txt");
  File[] files = f.listFiles();// files.length!!! error
  System.out.println("files="+files);

  System.out.println(Arrays.toString(files));
  System.out.println(f.getCanonicalPath());
  System.out.println(File.separatorChar);
  if(f.isDirectory()) System.out.println("Это директория");
  if(!f.exists()) f.createNewFile();
 }
}
//////////////////////////////////////////////////////////////////////////
Потоки бывают символьные, байтовые
FileWriter fw = new FileWriter("file1.txt");
fw.write("");
fw.flush() -  збрасывает из буфера в файл и гарантировано очищает буфер.
close - содержит flush

FileReader fr = new FileReader("file1.txt");
Scanner scan = new Scanner(fr);

scan.hasNextLine();
scan.nextLine();

scan.close();

while(scan.hasNext()) scan.next();
\n - переход на следующую строку
\t - табуляция

////////////////////////Иерархия папок
ArrayList<File> files =
files.add(dir); \\new File

for (int i=0; files.size;i++){

File[] arr = files.get(i).listFiles;

for (int j=0;j<arr...;j++){

if (isDirectiry)

files.add(arr[j])

}
}
}

Вложенные внетренние класы это класы обьявленные внутри другого класса

1. Вложенные(Nested Classes) static!!!
2. Внутренние (Inner Clases)
 - Обычные (Inner)
 - Локальные (Local)  это обьявленные внутри метода, имеет доступ только к локальным переменным только final
 - Анонимные (безимянные) (Anonymous)


 1. Вложенные (Nested Classes) static!!!!
 2. Внутренние (Inner Classes):
     - обычные    (Inner)
     - локальные  (Local)
     - анонимные (безымянные) (Anonymous)


   Методы сортировки
   Пузирек, выборка, вставками, Шела
   Подсчетом,Быстрая сортировка,Слияние

   Поиски
   1. Линейный
   2. Бинарный поиск (Двоичный)
   3. Бинарное дерево поиска


 /////////////////////////////////////////////////////////
 public class MyClass {
  static int sStatic;
  int sNonStatic;
  public static class NestedExmple{
   public void f1(){
   }
  }
  public class InnerExmple{
   public void f2(){
   }
  }
  public static void main(String[] args) {
  }
 }
 public class MainNestedInner {
  public static void main(String[] args) {
   MyClass.NestedExmple obj1 =
     new MyClass.NestedExmple();

   MyClass.InnerExmple obj2 =
     new MyClass().new InnerExmple();
   obj1.f1();
   obj2.f2();
  }
 }

 * Local
  public static void main(String[] args){
   final String name1 = "Name1";
   String name2 = "Name2";

   class InnerLocal{
    public void func(){

     System.out.println(name1 +" "+ nameStatic);
     //System.out.println(name2);//error
   }
   }
  }
 *****

 public class DateExmple {


  public static void main(String[] args) {
   Date d = new Date();
   Calendar c = new GregorianCalendar();
    Calendar c2 = new GregorianCalendar(2014, 12, 20);//календарь на 20 01 2014
   System.out.println("Date: " + d);
   System.out.println("GregorianCalendar: " + d);
   System.out.println("GregorianCalendar: " + c2);

   SimpleDateFormat format1 = new SimpleDateFormat("dd.MM.yyyy hh:mm");
      SimpleDateFormat format2 = new SimpleDateFormat("День dd Месяц MM Год yyyy Время hh:mm");
      SimpleDateFormat format3 = new SimpleDateFormat("dd-M-yyyy");
      //
      System.out.println(" SimpleDateFormat  format1 format2 format3 ");
      System.out.println("1: "+format1.format(d));
      System.out.println("2: "+format2.format(c.getTime()));
      System.out.println("3: "+format3.format(c2.getTime()));
      //
      System.out.println();

         //
      System.out.println("FirstDayOfWeek = "+c.getFirstDayOfWeek());
      System.out.println("TimeZone = "+c.getTimeZone());
         System.out.println("DAY_OF_WEEK = "+Calendar.DAY_OF_WEEK);
         System.out.println("DAY_OF_MONTH = "+Calendar.DAY_OF_MONTH);
         System.out.println("DECEMBER = "+c2.DECEMBER);
         //
         c2.add(Calendar.DAY_OF_YEAR, 1); //увеличиваем дату на 1 день
         System.out.println(c2.getTime());// Fri Feb 21 00:00:00 EET 2014
         c2.add(Calendar.DAY_OF_YEAR, -1); //уменьшаем дату на 1 день
         //
         System.out.println(format3.format(c2.getTime()));//20 02 2014
  }
 }



 [17:34:09] Кузменюк Максим: public enum MyEnum {
  Black, Red, White;
  public void f(){

  }
  public static void g(){

  }
  public static void main(String[] args) {
   System.out.println("Hello !");
  }
 }
 [17:34:17] Кузменюк Максим: public class MyEnumExample {
  public static void main(String[] args) {
   MyEnum obj = MyEnum.Black;
   obj = MyEnum.Red;
   obj.f();
   MyEnum.g();

   MyEnum[] consts = MyEnum.values();
   MyEnum obj1 = MyEnum.valueOf("Black");
   String s = obj1.toString();
  }
 }

Дженерики не работают с примитивным типами

Все класы являются наследниками Object

Олдносвязный список э то спмсок знающий только первый эл.
Эл односвязного списка знают свего соседа

class MyFirstList{
private Element first;
        add(e);
        get(i);
        size()
        print()

}


class Element{
pribate int value;
private Element next

}

Comparable
Comparator


Collections.sort(list);//Comparable
Arrays.sort(vector);//Comparable

public class Car  implements Comparable<Car>{
 private int nomer;
 @Override
 public int compareTo(Car car) {
  return this.nomer - car.getNomer();
 }
}

car1.compareTo(car2)
Comparable: String, Integer, Double, Character, Date, GregorianCalendar
************************************************
Collections.sort(list, new NumberSortCar());//Comparator
Arrays.sort(vector, new NumberSortCar());//Comparator

public class NumberSortCar implements Comparator<Car>{
 @Override
 public int compare(Car car1, Car car2) {
  ...
 }
}
************************************************
public class Car  implements Comparable{
 private int nomer;
 @Override
 public int compareTo(Object obj) {
 Car car = (Car)(obj);
  return this.nomer - car.getNomer();
 }
}
public class Car  implements Comparable<Car>{
 private int nomer;
 @Override
 public int compareTo(Car car) {
  return this.nomer - car.getNomer();
 }
}


cath(Exception e)
    s.o.p. ("AAAA");
    s.o.p. (e.getMessage);
    s.o.p. (e.PrintStackTrace());

                Throwable
          Exception       Error
          RunTimeException


public class Test1Exception {
 public static void main(String[] args) {
  int x = 10;
  //int y = 0;
  double y = 0;
  double res = x/y;
  System.out.println(res);
 }
}
***
public class Test2Exception {
 public static void main(String[] args) {
  int x = 10;
  //int y = 0;
  double y = 0;
  try{
  double res = x/y;
  System.out.println(res);
  } catch (Exception e){
   System.out.println("ОШИБКА !!!!");
   System.out.println(e.getMessage());
   e.printStackTrace();
  }
 }
}
***
public class Test3Exception {
 public static void main(String[] args) {
  throw new ArithmeticException("Ой! Ой! Ой!");
 }
}
***
import java.io.FileNotFoundException;
import java.io.FileReader;

public class Test4Exception {
 public static void f() throws FileNotFoundException {
  FileReader fr = new FileReader("file1.txt");
 }
 public static void main(String[] args) {
  try {
   f();
  } catch (FileNotFoundException e) {

   e.printStackTrace();
  }
 }
}
***
public class Test5Exception {
 public static void main(String[] args) {
  int k = (int)(2*Math.random());
     try {
         int[] a = new int[2];
         a[0] = 22 / 2;
         a[1] = 33 / 3;
         a[2] = 33 / k;
     } catch (ArithmeticException ex) {
         System.out.println("Деление на 0!");
     } catch (ArrayIndexOutOfBoundsException ex) {
         System.out.println("Выход за пределы массива!");
     } catch (Exception ex) {
         System.out.println("Общая ошибка!");
     }
 }
}

Нужно выучить:
Полиморфизм
Инкапсуляция
Наследие
Абстракция
Интерфейсы
Дженерики
Делегирование
Агрегирование
Сортировки Comparable, compareTo


Потоки ввода/вывода: Символьный, байтовый
Input Stram наследники Writer
Output Stram           Reade

Предопределенные потоки
System.in
System.err
System.out

***************************************************
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

public class FileOutputStreamExmple {
 public static void main(String[] args) throws IOException {
  OutputStream os = new FileOutputStream("file2.txt");
  byte[] buf = {100,101,102};
  os.write(123);
  os.write(buf);
  os.close();
 }
}
***************************************************
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

public class FileInputStreamExmple {
 public static void main(String[] args) throws IOException {
  InputStream is = new FileInputStream("file2.txt");
  int example = 3;
  int k;

  if(example == 1){
   int codeChar = 10;
   while(codeChar > -1){
    codeChar = is.read();
    System.out.println(codeChar + " = [" + ((char)codeChar) + "]");
   }
  }
  if(example == 2){
   byte[] buf = new byte[20];
   k = is.read(buf);
   System.out.println("k="+k);
   for(byte b : buf) System.out.println("["+b+"]=["+(char)(b)+"]");
  }
  if(example == 3){
   is.read();
   int len = is.available();
   System.out.println(len);
   byte[] buf = new byte[len];
   k = is.read(buf);
   System.out.println("k="+k);
   for(byte b : buf) System.out.println("["+b+"]=["+(char)(b)+"]");
  }
 }
}

**********************************************

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;

public class BufferedReaderExmple {
 public static void main(String[] args) throws IOException {
  Reader isr = new InputStreamReader(System.in);
        BufferedReader d = new BufferedReader(isr);

/*
        String a = d.readLine();

        System.out.println("Вы напечатали: " + a);
*/

        System.out.println(d.read());
        System.out.println(d.read());
        System.out.println(d.read());
        System.out.println(d.read());
        System.out.println(d.read());
        System.out.println(d.read());
        System.out.println(d.read());
        System.out.println(d.read());
        System.out.println(d.read());
        System.out.println(d.read());
 }
}

Клонирование

Clonable - это говорит о том что сущность может быть клонирована


Поверностное и глубокое

      Try - with - resources

      Seriliazable - процесс преобразование объект в байт код (число)
      Desirializable - процесс преобразование байт код в объект

//////////////////////////////////Сериализация и десериализация
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

public class TestSerilizable {
 public static void main(String[] args) {
  try {
   Product pr1 = new Product("Колбаса");

       // запись
       FileOutputStream fos = new FileOutputStream("temp.out");
       ObjectOutputStream oos = new ObjectOutputStream(fos);
       try {
        oos.writeObject(pr1);
       } finally {
        oos.close();
       }

   // чтение
   Product pr2;
   FileInputStream fis = new FileInputStream("temp.out");
   ObjectInputStream oin = new ObjectInputStream(fis);
   try {
    pr2 = (Product) oin.readObject();
    System.out.println(pr2);

   } finally {
    oin.close();
   }
  } catch (IOException e) {
   e.printStackTrace();
  } catch (ClassNotFoundException e) {
   e.printStackTrace();
  }

 }

}
transient

import java.io.Serializable;
public class Product implements Serializable {

 private static final long serialVersionUID = 1L;

 private String name;
 public Product(String n){
  name = n;
 }
 public String toString(){
  return name;
 }
}

-----GIT-----------------------------------

1. Установка git Bash.
MacOs:
http://git-scm.com/download/mac

Windows:
https://git-for-windows.github.io/
*********************************
2. Настройка git
git config --global user.name "MyName"
git config --global user.email "email"

Установка параметров окончания строк
Mac:
git config --global core.autocrlf input
git config --global core.savecrlf true
Windows
git config --global core.autocrlf true
git config --global core.savecrlf true

Настройка алиасов
git config --global alias.hist 'log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short'


3. Команды командной строки
mkdir <dir> - создание директории
cd <dir> - переход в директорию
cd ../<dir> - переход в соседнюю директорию
ls <dir> - отобразить содержимое папки
touch <file> - создание файла
cat <file> - просмотр содержимого файла
mv <file> <dir> - перемещение файла в директорию
 (git mv <file> <dir> - тоже самое но с авто addToIndex
rm - удаление указанного файла или набора файлов.
rmdir - удаление пустой директории
cp - копирование файлов




***********************************
4. Создание и клонирование репозитория
git init - создание репозитория в текущей папке
git init --bare - создание репозитория с атрибутом
 (этот атрибут необходим, если глобальный и локальные репо будут на локальном компе)

git clone <from> <to> - создание клоуна
*********************************
5. Команды обычных действий.
git add <file/dir>
git commit -m "text"
git pull(git fetch+git merge)
git push origin
*********************************
6.0 Команда log.
git log
git log --pretty=oneline
git log --max-count=2
git log --pretty=format: "%h %d | %s%d [%an] --graph --date=short
Давайте рассмотрим его в деталях:
--pretty="..." — определяет формат вывода.
%h — укороченный хэш коммита
%d — дополнения коммита («головы» веток или теги)
%ad — дата коммита
%s — комментарий
%an — имя автора
--graph — отображает дерево коммитов в виде ASCII-графика
--date=short — сохраняет формат даты коротким и симпатичным

6. Информационные команды.
git status
git log
git hist(если настроен алиас)
git hist --all
*********************************
Термины:
 index - область изменений, отмеченных для включения в коммит
 commit - отправка изменений в локальный репозиторий

 HEAD - указатель на commit, в котором мы находимся
 master - имя ветки по-умолчанию
 origin - имя удаленного репозитория
*********************************
7. Разные команды
git push -u origin master - отправить в глобальный репозиторий
git commit --ammend -m "Text" - докомитить в последний коммит
git checkout <ветка или хеш коммита> - переключиться на указанную ветку или коммит
git checkout <файл> - сбросить изменения файл до последней версии в индексе
git reset HEAD <file> -
git reset --hard <тег или хеш коммита> - переключит рабочую зону и текущую ветку к указаному коммиту
git revert HEAD --no-edit - отмена последнего коммита
git revert <хеш коммита> --no-edit - отмена коммита

git branch <имя ветки> - создание новой ветки
git checkout <имя ветки> - переключиться на новую ветку

git merge <имя ветки> - слить текущую ветку с указанной
git merge master - слить текущую ветку с master
*********************************
8. Советы, чтоб отменить изменения:
 - измененный файле не в индексе - git checkout <file>
 - изменененый файл в индексе - git reset HEAD <file>
 - файл изменен и закомичен - git revert <хеш коммита> --no-edit
 - удален файл или папка из проекта -
*********************************
9. Возможные конфликты.
 1) content conflict - корректируем файл, добавляем в индекс и комитим
 2) content conflict - создаем другую ветку, в нем корректируем файл, добавляем в индекс, комитим
  и сливаем ветку в ветку master.
 3) fast-forward
*********************************
10. Для работы с удаленным репозиторием
git remote (из лок.) - увидеть имя главной ветки удаленного репо.
git remote show origin - увидеть больше информации
git fetch - получить из глобального в локальный
 (изменения локального и глобального в этом случае не сливаются)
git pull - это комбинация fetch+merge
git push -u origin master
*********************************

VIM
ESC+I-режим редактирования
:q! - закрыть файл без сохранения;
:qa! или : x - закрыть все файлы без сохранения;
:wq - закрыть и сохранить файл;
:wqa - закрыть все файлы с сохранением.